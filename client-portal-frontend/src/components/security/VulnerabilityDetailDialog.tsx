import React from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { Calendar, Server, User, ExternalLink, AlertTriangle, Shield } from "lucide-react";
import type { Database } from "@/integrations/supabase/types";

type Vulnerability = Database["public"]["Tables"]["security_vulnerabilities"]["Row"] & {
  cloud_asset?: Database["public"]["Tables"]["cloud_asset"]["Row"];
  assigned_to_profile?: Database["public"]["Tables"]["profiles"]["Row"];
};

interface VulnerabilityDetailDialogProps {
  vulnerability: Vulnerability | null;
  open: boolean;
  onClose: () => void;
  onEdit: (vulnerability: Vulnerability) => void;
}

const getSeverityConfig = (severity: string) => {
  switch (severity) {
    case "critical":
      return { variant: "destructive" as const, icon: AlertTriangle, label: "Critique", color: "text-red-600" };
    case "high":
      return { variant: "secondary" as const, icon: AlertTriangle, label: "Élevée", color: "text-orange-600" };
    case "medium":
      return { variant: "default" as const, icon: AlertTriangle, label: "Moyenne", color: "text-yellow-600" };
    case "low":
      return { variant: "outline" as const, icon: Shield, label: "Faible", color: "text-green-600" };
    default:
      return { variant: "outline" as const, icon: AlertTriangle, label: severity, color: "text-gray-600" };
  }
};

const getStatusConfig = (status: string) => {
  switch (status) {
    case "open":
      return { variant: "destructive" as const, label: "Ouvert" };
    case "in_progress":
      return { variant: "secondary" as const, label: "En cours" };
    case "resolved":
      return { variant: "default" as const, label: "Résolu" };
    case "closed":
      return { variant: "outline" as const, label: "Fermé" };
    default:
      return { variant: "outline" as const, label: status };
  }
};

export const VulnerabilityDetailDialog: React.FC<VulnerabilityDetailDialogProps> = ({
  vulnerability,
  open,
  onClose,
  onEdit,
}) => {
  if (!vulnerability) return null;

  const severityConfig = getSeverityConfig(vulnerability.severity);
  const statusConfig = getStatusConfig(vulnerability.status || "open");

  const formatDate = (dateString: string | null) => {
    if (!dateString) return "Non défini";
    return new Date(dateString).toLocaleString('fr-FR');
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-start justify-between">
            <div className="space-y-2">
              <div className="flex items-center gap-2 flex-wrap">
                <Badge variant={severityConfig.variant}>
                  <severityConfig.icon className="h-3 w-3 mr-1" />
                  {severityConfig.label}
                </Badge>
                <Badge variant={statusConfig.variant}>
                  {statusConfig.label}
                </Badge>
                {vulnerability.cve_id && (
                  <Badge variant="outline">{vulnerability.cve_id}</Badge>
                )}
              </div>
              <DialogTitle className="text-xl">{vulnerability.title}</DialogTitle>
              <DialogDescription className="text-base">
                Détails complets de la vulnérabilité de sécurité
              </DialogDescription>
            </div>
            <Button variant="outline" onClick={() => onEdit(vulnerability)}>
              Modifier
            </Button>
          </div>
        </DialogHeader>

        <div className="space-y-6">
          {/* Description */}
          {vulnerability.description && (
            <div>
              <h3 className="font-semibold mb-2">Description</h3>
              <p className="text-sm text-muted-foreground whitespace-pre-wrap">
                {vulnerability.description}
              </p>
            </div>
          )}

          <Separator />

          {/* Informations principales */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <h3 className="font-semibold">Informations de base</h3>
              
              <div className="space-y-3">
                <div className="flex items-center gap-2">
                  <severityConfig.icon className={`h-4 w-4 ${severityConfig.color}`} />
                  <div>
                    <p className="text-sm font-medium">Sévérité</p>
                    <p className="text-sm text-muted-foreground">{severityConfig.label}</p>
                  </div>
                </div>

                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <div>
                    <p className="text-sm font-medium">Découvert le</p>
                    <p className="text-sm text-muted-foreground">
                      {formatDate(vulnerability.discovered_at)}
                    </p>
                  </div>
                </div>

                {vulnerability.remediated_at && (
                  <div className="flex items-center gap-2">
                    <Calendar className="h-4 w-4 text-muted-foreground" />
                    <div>
                      <p className="text-sm font-medium">Corrigé le</p>
                      <p className="text-sm text-muted-foreground">
                        {formatDate(vulnerability.remediated_at)}
                      </p>
                    </div>
                  </div>
                )}

                {vulnerability.cve_id && (
                  <div className="flex items-center gap-2">
                    <ExternalLink className="h-4 w-4 text-muted-foreground" />
                    <div>
                      <p className="text-sm font-medium">CVE ID</p>
                      <a 
                        href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vulnerability.cve_id}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-sm text-primary hover:underline"
                      >
                        {vulnerability.cve_id}
                      </a>
                    </div>
                  </div>
                )}
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="font-semibold">Asset et attribution</h3>
              
              <div className="space-y-3">
                {vulnerability.cloud_asset && (
                  <div className="flex items-start gap-2">
                    <Server className="h-4 w-4 text-muted-foreground mt-0.5" />
                    <div>
                      <p className="text-sm font-medium">Asset concerné</p>
                      <p className="text-sm text-muted-foreground">
                        {vulnerability.cloud_asset.asset_name}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        Type: {vulnerability.cloud_asset.asset_type || 'Non défini'}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        Région: {vulnerability.cloud_asset.region || 'Non définie'}
                      </p>
                    </div>
                  </div>
                )}

                {vulnerability.assigned_to_profile && (
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4 text-muted-foreground" />
                    <div>
                      <p className="text-sm font-medium">Assigné à</p>
                      <p className="text-sm text-muted-foreground">
                        {vulnerability.assigned_to_profile.first_name} {vulnerability.assigned_to_profile.last_name}
                      </p>
                      <p className="text-xs text-muted-foreground">
                        {vulnerability.assigned_to_profile.email}
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Assets affectés */}
          {vulnerability.affected_instances && vulnerability.affected_instances.length > 0 && (
            <>
              <Separator />
              <div>
                <h3 className="font-semibold mb-2">Instances affectées</h3>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                  {vulnerability.affected_instances.map((instanceId, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {instanceId.slice(0, 8)}...
                    </Badge>
                  ))}
                </div>
              </div>
            </>
          )}

          {/* Métadonnées */}
          {vulnerability.metadata && Object.keys(vulnerability.metadata).length > 0 && (
            <>
              <Separator />
              <div>
                <h3 className="font-semibold mb-2">Métadonnées</h3>
                <pre className="text-xs bg-muted p-3 rounded-md overflow-x-auto">
                  {JSON.stringify(vulnerability.metadata, null, 2)}
                </pre>
              </div>
            </>
          )}

          <Separator />

          {/* Informations système */}
          <div className="text-xs text-muted-foreground space-y-1">
            <p>ID: {vulnerability.id}</p>
            <p>Créé le: {formatDate(vulnerability.created_at)}</p>
            <p>Mis à jour le: {formatDate(vulnerability.updated_at)}</p>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};