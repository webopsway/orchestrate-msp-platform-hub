import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertTriangle, Shield, ExternalLink, Calendar } from 'lucide-react';
import { toast } from 'sonner';
import {
  SecurityVulnerability,
  CreateSecurityVulnerabilityData,
  UpdateSecurityVulnerabilityData
} from '@/types/cloudAsset';

// Schéma de validation
const vulnerabilitySchema = z.object({
  cve_id: z.string().min(1, 'CVE ID requis'),
  severity: z.string().optional(),
  cvss_score: z.number().min(0).max(10).optional(),
  description: z.string().optional(),
  published_at: z.string().optional(),
  references: z.string().optional(),
  source: z.string().optional(),
  metadata: z.string().optional()
});

type VulnerabilityFormData = z.infer<typeof vulnerabilitySchema>;

interface SecurityVulnerabilityFormProps {
  vulnerability?: SecurityVulnerability;
  onSubmit: (data: CreateSecurityVulnerabilityData | UpdateSecurityVulnerabilityData) => Promise<void>;
  onCancel: () => void;
  loading?: boolean;
}

export const SecurityVulnerabilityForm = ({
  vulnerability: vulnData,
  onSubmit,
  onCancel,
  loading = false
}: SecurityVulnerabilityFormProps) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
    reset,
    setValue
  } = useForm<VulnerabilityFormData>({
    resolver: zodResolver(vulnerabilitySchema),
    defaultValues: {
      cve_id: vulnData?.cve_id || '',
      severity: vulnData?.severity || '',
      cvss_score: vulnData?.cvss_score || undefined,
      description: vulnData?.description || '',
      published_at: vulnData?.published_at ? new Date(vulnData.published_at).toISOString().split('T')[0] : '',
      references: vulnData?.refs ? vulnData.refs.join('\n') : '',
      source: vulnData?.source || '',
      metadata: vulnData?.metadata ? JSON.stringify(vulnData.metadata, null, 2) : ''
    }
  });

  useEffect(() => {
    if (vulnData) {
      reset({
        cve_id: vulnData.cve_id,
        severity: vulnData.severity || '',
        cvss_score: vulnData.cvss_score || undefined,
        description: vulnData.description || '',
        published_at: vulnData.published_at ? new Date(vulnData.published_at).toISOString().split('T')[0] : '',
        references: vulnData.refs ? vulnData.refs.join('\n') : '',
        source: vulnData.source || '',
        metadata: vulnData.metadata ? JSON.stringify(vulnData.metadata, null, 2) : ''
      });
    }
  }, [vulnData, reset]);

  const handleFormSubmit = async (data: VulnerabilityFormData) => {
    try {
      const submitData = {
        ...data,
        references: data.references ? data.references.split('\n').filter(ref => ref.trim()) : [],
        metadata: data.metadata ? JSON.parse(data.metadata) : {}
      };

      await onSubmit(submitData);
      toast.success(vulnData ? 'Vulnérabilité mise à jour' : 'Vulnérabilité ajoutée');
    } catch (error) {
      console.error('Error submitting vulnerability:', error);
      toast.error('Erreur lors de la soumission');
    }
  };

  const handleMetadataValidation = (value: string) => {
    try {
      if (value) {
        JSON.parse(value);
      }
      return true;
    } catch {
      return false;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'text-red-600';
      case 'high': return 'text-orange-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-blue-600';
      case 'info': return 'text-gray-600';
      default: return 'text-gray-600';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
      case 'high': return AlertTriangle;
      case 'medium': return Shield;
      case 'low':
      case 'info': return ExternalLink;
      default: return AlertTriangle;
    }
  };

  return (
    <Card className="w-full max-w-2xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <AlertTriangle className="h-5 w-5" />
          {vulnData ? 'Modifier la vulnérabilité' : 'Nouvelle vulnérabilité'}
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-6">
          {/* Informations de base */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="cve_id">CVE ID *</Label>
              <Input
                id="cve_id"
                {...register('cve_id')}
                placeholder="CVE-2023-1234"
                disabled={!!vulnData}
              />
              {errors.cve_id && (
                <p className="text-sm text-red-500">{errors.cve_id.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="severity">Sévérité</Label>
              <Select 
                value={watch('severity')} 
                onValueChange={(value) => setValue('severity', value)}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Sélectionner la sévérité" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="critical">Critique</SelectItem>
                  <SelectItem value="high">Élevée</SelectItem>
                  <SelectItem value="medium">Moyenne</SelectItem>
                  <SelectItem value="low">Faible</SelectItem>
                  <SelectItem value="info">Information</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Score CVSS */}
          <div className="space-y-2">
            <Label htmlFor="cvss_score">Score CVSS (0-10)</Label>
            <Input
              id="cvss_score"
              type="number"
              step="0.1"
              min="0"
              max="10"
              {...register('cvss_score', { valueAsNumber: true })}
              placeholder="7.5"
            />
            {errors.cvss_score && (
              <p className="text-sm text-red-500">{errors.cvss_score.message}</p>
            )}
          </div>

          {/* Description */}
          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              {...register('description')}
              placeholder="Description détaillée de la vulnérabilité..."
              rows={3}
            />
          </div>

          {/* Date de publication */}
          <div className="space-y-2">
            <Label htmlFor="published_at">Date de publication</Label>
            <Input
              id="published_at"
              type="date"
              {...register('published_at')}
            />
          </div>

          {/* Source */}
          <div className="space-y-2">
            <Label htmlFor="source">Source</Label>
            <Select 
              value={watch('source')} 
              onValueChange={(value) => setValue('source', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Sélectionner la source" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="nvd">NVD (National Vulnerability Database)</SelectItem>
                <SelectItem value="mitre">MITRE</SelectItem>
                <SelectItem value="vendor">Vendeur</SelectItem>
                <SelectItem value="security_researcher">Chercheur en sécurité</SelectItem>
                <SelectItem value="automated_scan">Scan automatisé</SelectItem>
                <SelectItem value="other">Autre</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Références */}
          <div className="space-y-2">
            <Label htmlFor="references">Références (une par ligne)</Label>
            <Textarea
              id="references"
              {...register('references')}
              placeholder="https://nvd.nist.gov/vuln/detail/CVE-2023-1234&#10;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-1234"
              rows={3}
            />
          </div>

          {/* Métadonnées */}
          <div className="space-y-2">
            <Label htmlFor="metadata">Métadonnées (JSON)</Label>
            <Textarea
              id="metadata"
              {...register('metadata')}
              placeholder='{"affected_products": ["nginx", "1.18.0"], "exploit_available": false, "patch_available": true}'
              rows={4}
              className="font-mono text-sm"
            />
            {watch('metadata') && !handleMetadataValidation(watch('metadata')) && (
              <p className="text-sm text-red-500">JSON invalide</p>
            )}
          </div>

          {/* Aperçu de la sévérité */}
          {watch('severity') && (
            <div className={`p-3 rounded-lg border flex items-center gap-2 ${getSeverityColor(watch('severity'))}`}>
              {React.createElement(getSeverityIcon(watch('severity')), { className: 'h-4 w-4' })}
              <span className="font-medium">
                Sévérité {watch('severity').toUpperCase()}
                {watch('cvss_score') && ` - Score CVSS: ${watch('cvss_score')}`}
              </span>
            </div>
          )}

          {/* Actions */}
          <div className="flex justify-end gap-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
              disabled={loading}
            >
              Annuler
            </Button>
            <Button
              type="submit"
              disabled={loading || (watch('metadata') && !handleMetadataValidation(watch('metadata')))}
            >
              {loading ? 'Enregistrement...' : (vulnData ? 'Mettre à jour' : 'Ajouter')}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}; 