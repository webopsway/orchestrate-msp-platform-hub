import React from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Calendar, Server, User, MoreVertical, Eye, Edit, Trash2, AlertTriangle } from "lucide-react";
import type { Database } from "@/integrations/supabase/types";

type Vulnerability = Database["public"]["Tables"]["security_vulnerabilities"]["Row"] & {
  cloud_asset?: Database["public"]["Tables"]["cloud_asset"]["Row"];
  assigned_to_profile?: Database["public"]["Tables"]["profiles"]["Row"];
};

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  onView: (vulnerability: Vulnerability) => void;
  onEdit: (vulnerability: Vulnerability) => void;
  onDelete: (vulnerability: Vulnerability) => void;
}

const getSeverityConfig = (severity: string) => {
  switch (severity) {
    case "critical":
      return { variant: "destructive" as const, icon: AlertTriangle, label: "Critique" };
    case "high":
      return { variant: "secondary" as const, icon: AlertTriangle, label: "Élevée" };
    case "medium":
      return { variant: "default" as const, icon: AlertTriangle, label: "Moyenne" };
    case "low":
      return { variant: "outline" as const, icon: AlertTriangle, label: "Faible" };
    default:
      return { variant: "outline" as const, icon: AlertTriangle, label: severity };
  }
};

const getStatusConfig = (status: string) => {
  switch (status) {
    case "open":
      return { variant: "destructive" as const, label: "Ouvert" };
    case "in_progress":
      return { variant: "secondary" as const, label: "En cours" };
    case "resolved":
      return { variant: "default" as const, label: "Résolu" };
    case "closed":
      return { variant: "outline" as const, label: "Fermé" };
    default:
      return { variant: "outline" as const, label: status };
  }
};

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({
  vulnerability,
  onView,
  onEdit,
  onDelete,
}) => {
  const severityConfig = getSeverityConfig(vulnerability.severity);
  const statusConfig = getStatusConfig(vulnerability.status || "open");

  return (
    <Card className="hover:shadow-md transition-shadow animate-fade-in">
      <CardHeader>
        <div className="flex items-start justify-between">
          <div className="space-y-2 flex-1">
            <div className="flex items-center gap-2 flex-wrap">
              <Badge variant={severityConfig.variant}>
                <severityConfig.icon className="h-3 w-3 mr-1" />
                {severityConfig.label}
              </Badge>
              <Badge variant={statusConfig.variant}>
                {statusConfig.label}
              </Badge>
              {vulnerability.cve_id && (
                <Badge variant="outline">{vulnerability.cve_id}</Badge>
              )}
            </div>
            <CardTitle className="text-lg leading-tight">
              {vulnerability.title}
            </CardTitle>
            {vulnerability.description && (
              <p className="text-sm text-muted-foreground line-clamp-2">
                {vulnerability.description}
              </p>
            )}
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onView(vulnerability)}>
                <Eye className="h-4 w-4 mr-2" />
                Voir détails
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => onEdit(vulnerability)}>
                <Edit className="h-4 w-4 mr-2" />
                Modifier
              </DropdownMenuItem>
              <DropdownMenuItem 
                onClick={() => onDelete(vulnerability)}
                className="text-destructive"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Supprimer
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            {vulnerability.cloud_asset && (
              <div className="flex items-center gap-2">
                <Server className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="font-medium">{vulnerability.cloud_asset.asset_name}</p>
                  <p className="text-muted-foreground">Asset concerné</p>
                </div>
              </div>
            )}
            
            <div className="flex items-center gap-2">
              <Calendar className="h-4 w-4 text-muted-foreground" />
              <div>
                <p className="font-medium">
                  {vulnerability.discovered_at 
                    ? new Date(vulnerability.discovered_at).toLocaleDateString('fr-FR')
                    : new Date(vulnerability.created_at || '').toLocaleDateString('fr-FR')
                  }
                </p>
                <p className="text-muted-foreground">Découvert</p>
              </div>
            </div>

            {vulnerability.assigned_to_profile && (
              <div className="flex items-center gap-2">
                <User className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="font-medium">
                    {vulnerability.assigned_to_profile.first_name} {vulnerability.assigned_to_profile.last_name}
                  </p>
                  <p className="text-muted-foreground">Assigné à</p>
                </div>
              </div>
            )}

            {vulnerability.remediated_at && (
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="font-medium">
                    {new Date(vulnerability.remediated_at).toLocaleDateString('fr-FR')}
                  </p>
                  <p className="text-muted-foreground">Corrigé</p>
                </div>
              </div>
            )}
          </div>

          <div className="pt-2 border-t flex items-center justify-between">
            <span className="text-xs text-muted-foreground">
              ID: {vulnerability.id.slice(0, 8)}...
            </span>
            <Button variant="outline" size="sm" onClick={() => onView(vulnerability)}>
              <Eye className="h-4 w-4 mr-1" />
              Détails
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};